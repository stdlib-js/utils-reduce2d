{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Reduces the number of dimensions by one of a two-dimensional nested array by applying a function against an accumulator and each element along the innermost dimension and returning the accumulation results as a one-dimensional array.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **accumulator**: accumulated value.\n*     -   **value**: array element.\n*     -   **i**: index of the first dimension.\n*     -   **j**: index of the second dimension.\n*     -   **arr**: input array.\n*\n* @param {ArrayLikeObject<Collection>} arr - array of arrays\n* @param {ArrayLikeObject} initial - initial values\n* @param {Function} reducer - reduction function\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array of arrays\n* @throws {TypeError} second argument must be an array-like object\n* @throws {RangeError} second argument must have a length equal to the size of the outermost input array dimension\n* @throws {TypeError} third argument must be a function\n* @returns {Array} results\n*\n* @example\n* var naryFunction = require( '@stdlib/utils-nary-function' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var arr = [\n*     [ 1, 2, 3 ],\n*     [ 4, 5, 6 ]\n* ];\n*\n* var out = reduce2d( arr, [ 0, 0 ], naryFunction( add, 2 ) );\n* // returns [ 6, 15 ]\n*/\nfunction reduce2d( arr, initial, reducer, thisArg ) {\n\tvar out;\n\tvar acc;\n\tvar M;\n\tvar N;\n\tvar a;\n\tvar i;\n\tvar j;\n\n\tif ( !isArrayLikeObject( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', arr ) );\n\t}\n\tif ( !isArrayLikeObject( initial ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', initial ) );\n\t}\n\tif ( initial.length !== arr.length ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument must have a length equal to the size of the outermost input array dimension.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', reducer ) );\n\t}\n\tM = arr.length;\n\tout = [];\n\tfor ( i = 0; i < M; i++ ) {\n\t\ta = arr[ i ];\n\t\tif ( !isCollection( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing array-like objects. Index: %u. Value: `%s`.', i, a ) );\n\t\t}\n\t\tN = a.length;\n\t\tacc = initial[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tacc = reducer.call( thisArg, acc, a[ j ], i, j, arr );\n\t\t}\n\t\tout.push( acc );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reduce2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reduce the number of dimensions by one of a two-dimensional nested array by applying a function against an accumulator and each element along the innermost dimension and return the accumulation results as a one-dimensional array.\n*\n* @module @stdlib/utils-reduce2d\n*\n* @example\n* var naryFunction = require( '@stdlib/utils-nary-function' );\n* var add = require( '@stdlib/math-base-ops-add' );\n* var reduce2d = require( '@stdlib/utils-reduce2d' );\n*\n* var arr = [\n*     [ 1, 2, 3 ],\n*     [ 4, 5, 6 ]\n* ];\n*\n* var out = reduce2d( arr, [ 0, 0 ], naryFunction( add, 2 ) );\n* // returns [ 6, 15 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["isArrayLikeObject","require$$0","isCollection","require$$1","isFunction","require$$2","format","require$$3","lib","arr","initial","reducer","thisArg","out","acc","M","N","a","i","j","TypeError","length","RangeError","call","push"],"mappings":";;8VAsBA,IAAIA,EAAoBC,EACpBC,EAAeC,EACfC,EAAaC,EACbC,EAASC,EAiFb,IC5DAC,EDmBA,SAAmBC,EAAKC,EAASC,EAASC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMnB,EAAmBS,GACxB,MAAM,IAAIW,UAAWd,EAAQ,8EAA+EG,IAE7G,IAAMT,EAAmBU,GACxB,MAAM,IAAIU,UAAWd,EAAQ,+EAAgFI,IAE9G,GAAKA,EAAQW,SAAWZ,EAAIY,OAC3B,MAAM,IAAIC,WAAY,kHAEvB,IAAMlB,EAAYO,GACjB,MAAM,IAAIS,UAAWd,EAAQ,oEAAqEK,IAInG,IAFAI,EAAIN,EAAIY,OACRR,EAAM,GACAK,EAAI,EAAGA,EAAIH,EAAGG,IAAM,CAEzB,GADAD,EAAIR,EAAKS,IACHhB,EAAce,GACnB,MAAM,IAAIG,UAAWd,EAAQ,uHAAwHY,EAAGD,IAIzJ,IAFAD,EAAIC,EAAEI,OACNP,EAAMJ,EAASQ,GACTC,EAAI,EAAGA,EAAIH,EAAGG,IACnBL,EAAMH,EAAQY,KAAMX,EAASE,EAAKG,EAAGE,GAAKD,EAAGC,EAAGV,GAEjDI,EAAIW,KAAMV,GAEX,OAAOD"}